name: Backend CI/CD Pipeline

on:
  push:
    branches: 
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Load Environment Variables
        id: env_vars
        run: |
          # Read variables from deploy_env_vars file (ignoring comments)
          while IFS='=' read -r key value || [ -n "$key" ]; do
            # Skip comments and empty lines
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            # Trim leading/trailing spaces
            key=$(echo $key | xargs)
            value=$(echo $value | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "$key=$value"
          done < deployment/deploy_env_vars
      
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test
      
      - name: Test with Gradle
        run: |
          ./gradlew :member:test :member:jacocoTestReport
          ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport
          ./gradlew :recommend:test :recommend:jacocoTestReport

      - name: SonarQube Analysis - Member
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :member:sonar \
            -Dsonar.projectKey=lifesub-member-${{ env.teamid }} \
            -Dsonar.projectName=lifesub-member-${{ env.teamid }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Analysis - Mysub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :mysub-infra:sonar \
            -Dsonar.projectKey=lifesub-mysub-${{ env.teamid }} \
            -Dsonar.projectName=lifesub-mysub-${{ env.teamid }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Analysis - Recommend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew :recommend:sonar \
            -Dsonar.projectKey=lifesub-recommend-${{ env.teamid }} \
            -Dsonar.projectName=lifesub-recommend-${{ env.teamid }} \
            -Dsonar.java.binaries=build/classes/java/main \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/** \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Upload Member Artifact
        uses: actions/upload-artifact@v4
        with:
          name: member-artifact
          path: member/build/libs/member.jar
          retention-days: 1

      - name: Upload Mysub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mysub-artifact
          path: mysub-infra/build/libs/mysub.jar
          retention-days: 1

      - name: Upload Recommend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: recommend-artifact
          path: recommend/build/libs/recommend.jar
          retention-days: 1

  release:
    name: Build and Push Images
    needs: build
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.set-image-tag.outputs.imageTag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Load Environment Variables
        id: env_vars
        run: |
          # Read variables from deploy_env_vars file (ignoring comments)
          while IFS='=' read -r key value || [ -n "$key" ]; do
            # Skip comments and empty lines
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            # Trim leading/trailing spaces
            key=$(echo $key | xargs)
            value=$(echo $value | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "$key=$value"
          done < deployment/deploy_env_vars

      - name: Set Image Tag
        id: set-image-tag
        run: |
          timestamp=$(date +'%Y%m%d%H%M%S')
          echo "imageTag=${timestamp}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${timestamp}" >> $GITHUB_ENV

      - name: Download Member Artifact
        uses: actions/download-artifact@v3
        with:
          name: member-artifact
          path: member/build/libs/

      - name: Download Mysub Artifact
        uses: actions/download-artifact@v3
        with:
          name: mysub-artifact
          path: mysub-infra/build/libs/

      - name: Download Recommend Artifact
        uses: actions/download-artifact@v3
        with:
          name: recommend-artifact
          path: recommend/build/libs/

      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Member Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/member:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=member/build/libs
            ARTIFACTORY_FILE=member.jar

      - name: Build and Push Mysub Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/mysub:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=mysub-infra/build/libs
            ARTIFACTORY_FILE=mysub.jar

      - name: Build and Push Recommend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployment/container/Dockerfile
          push: true
          tags: ${{ env.registry }}/${{ env.image_org }}/recommend:${{ env.IMAGE_TAG }}
          build-args: |
            BUILD_LIB_DIR=recommend/build/libs
            ARTIFACTORY_FILE=recommend.jar

  deploy:
    name: Deploy to Kubernetes
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Load Environment Variables
        id: env_vars
        run: |
          # Read variables from deploy_env_vars file (ignoring comments)
          while IFS='=' read -r key value || [ -n "$key" ]; do
            # Skip comments and empty lines
            [[ $key =~ ^#.*$ || -z $key ]] && continue
            # Trim leading/trailing spaces
            key=$(echo $key | xargs)
            value=$(echo $value | xargs)
            echo "$key=$value" >> $GITHUB_ENV
            echo "$key=$value"
          done < deployment/deploy_env_vars

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group rg-digitalgarage-03 \
            --name aks-digitalgarage-03 \
            --overwrite-existing

      - name: Create Namespace
        run: |
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate Deployment Manifest
        run: |
          # Set image tag from previous job
          export namespace=${{ env.namespace }}
          export allowed_origins=${{ env.allowed_origins }}
          export jwt_secret_key=${{ env.jwt_secret_key }}
          export postgres_user=${{ env.postgres_user }}
          export postgres_password=${{ env.postgres_password }}
          export replicas=${{ env.replicas }}
          export resources_requests_cpu=${{ env.resources_requests_cpu }}
          export resources_requests_memory=${{ env.resources_requests_memory }}
          export resources_limits_cpu=${{ env.resources_limits_cpu }}
          export resources_limits_memory=${{ env.resources_limits_memory }}
          
          # Set image paths with image tag from release job
          export member_image_path=${{ env.registry }}/${{ env.image_org }}/member:${{ needs.release.outputs.imageTag }}
          export mysub_image_path=${{ env.registry }}/${{ env.image_org }}/mysub:${{ needs.release.outputs.imageTag }}
          export recommend_image_path=${{ env.registry }}/${{ env.image_org }}/recommend:${{ needs.release.outputs.imageTag }}
          
          # Generate manifest from template
          envsubst < deployment/deploy.yaml.template > deployment/deploy.yaml
          
          # Debug - Show generated manifest
          echo "==== Generated Kubernetes Manifest ===="
          cat deployment/deploy.yaml

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f deployment/deploy.yaml
          
          echo "Waiting for deployments to be ready..."
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/member --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/mysub --timeout=300s
          kubectl -n ${{ env.namespace }} wait --for=condition=available deployment/recommend --timeout=300s
          
          echo "Deployment completed successfully!"